create schema air; 

CREATE table if not exists air.Airport (
    id serial PRIMARY KEY,
    name text,
    city varchar(50),
    country VARCHAR(50));


create table  if not exists air.Airline(
id serial primary key,
name text,
num int);

create table if not exists air.Flight(
id serial primary key,
flight_number int,
date_flight timestamp,
dep_airport int references air.airport(id),
arr_airport int references air.airport(id),
id_airline int references air.airline(id),
volume int);

alter table air.Flight rename column flight_number to number_flight;

insert into air.airport(name, city, country) values ('Внуково', 'Москва', 'RU');
alter sequence air.airport_id_seq restart with 101;

delete from air.airport
where id=101

alter sequence air.airport_id_seq restart with 2;

alter table air.airport add constraint name_unique unique(name);


select * from air.airport;



insert into air.airline(name, num) values ('aeroflot', 1001), ('rossiya', 989);

insert into air.Flight(number_flight, date_flight, dep_airport, arr_airport, id_airline, volume)
values(1,'2023-09-15 10:00:00', 1, 2, 1, 180);

insert into air.Flight(number_flight, date_flight, dep_airport, arr_airport, id_airline, volume)
values(2,'2023-09-15 12:30:00', 2, 1, 1, 180);

insert into air.Flight(number_flight, date_flight, dep_airport, arr_airport, id_airline, volume)
values(3,'2023-09-16 10:00:00', 1, 2, 2, 180);

insert into air.Flight(number_flight, date_flight, dep_airport, arr_airport, id_airline, volume)
values(4,'2023-09-16 13:00:00', 2, 1, 2, 180);

update air.flight 
set volume = 200
where id in (3,4);

select * 
from air.flight
order by date_flight desc;

delete from air.airport where id =1;



select dep_airport  from air.flight
group by dep_airport 
limit 3;


--select, from, where, order by, group by, limit, join(left join, full koin, outer join, inner join), hawing
--where -всегда кроме !!когда уже group by , если group by то использую hawing.
--


create table if not exists air.Pilot(
id serial primary key,
name_pilot text,
birthdate date,
number_flight int foreign key number_flight_passanger);

create table if not exists air.Passenger(
id serial primary key,
name_passenger text,
number_flight_passanger int);


---------------------cost - dased - оценка работы БД,--------- group by и * - не поддерживается

select * from air.Flight f ;

update air.Flight
set number_flight = number_flight+100
where id in (1, 3, 5, 9, 10);

insert into air.Flight(number_flight, date_flight, dep_airport, arr_airport, id_airline, volume)
values
(5,'2023-09-15 10:00:00', 1, 2, 1, 220),
(6,'2023-09-15 10:00:00', 2, 1, 1, 220),
(7,'2023-09-15 10:00:00', 1, 2, 1, 300),
(8,'2023-09-15 10:00:00', 2, 1, 1, 300),
(9,'2023-09-15 10:00:00', 1, 2, 1, 320),
(10,'2023-09-15 10:00:00', 2, 1, 1, 320);

insert into air.Flight(number_flight, date_flight, dep_airport, arr_airport, id_airline, volume)
values
(11,'2023-09-18 10:00:00', 1, 2, 1, 500);


select volume, count(*) from air.Flight f
group by volume ;

select distinct volume, id from air.flight;---уникальная комбинация


select volume, sum(number_flight) from air.Flight f
group by volume ;

select volume, sum(number_flight)/2 as fix_number from air.Flight f
group by volume ;

select volume, sum(number_flight)/2 as fix_number from air.Flight f
where id in (1,3,5,9,10)
group by volume 
having count(*)>1 ;


select * from air.Flight as f ;
select * from air.Airline as a ;
select * from air.airport as a ;

select f.id, f.number_flight , f.date_flight , f.volume ,
a."name" ,a.num , 
ar_1."name" , ar_1.city ,ar_1.country,
ar_2."name" , ar_2.city ,ar_2.country  
from air.Flight as f 
join air.Airline as a 
on f.id_airline  = a.id 
join air.Airport as ar_1
on f.dep_airport = ar_1.id
join air.airport as ar_2
on f.arr_airport = ar_2.id
order by id desc;

---- innerjoin - совмещает совпадения, пересечения
-----left и right join -совмещает всю таблицу справа или слева и + втоая таблица
----outer - все что не совпало
---wal журнал

----Транзакции
---begin, savepoint, rollback to, commit





