'use client';
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import {
  Box,
  Container,
  VStack,
  HStack,
  Text,
  Button,
  useToast,
  Card,
  CardBody,
  CardHeader,
  Image,
  IconButton,
  NumberInput,
  NumberInputField,
  NumberInputStepper,
  NumberIncrementStepper,
  NumberDecrementStepper,
  Divider,
  Badge,
  Spinner,
  Alert,
  AlertIcon,
  Flex,
  Heading,
} from '@chakra-ui/react';
import { motion } from 'framer-motion';
import { FaTrash, FaArrowLeft, FaCreditCard, FaShoppingBag } from 'react-icons/fa';
import { FiHome } from 'react-icons/fi';
import { useCart } from '../hooks/useCart';

interface CartItem {
  id: number;
  name: string;
  price: number;
  quantity: number;
  imageUrl: string;
  shopName: string;
}

const CartPage: React.FC = () => {
  const router = useRouter();
  const toast = useToast();
  const { cartItems, updateQuantity, removeFromCart, clearCart, getTotalAmount } = useCart();
  const [loading, setLoading] = useState(false);

  // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
  const totalAmount = getTotalAmount();

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
  const proceedToCheckout = () => {
    if (cartItems.length === 0) {
      toast({
        title: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞',
        description: '–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞',
        status: 'warning',
        duration: 3000,
        isClosable: true,
      });
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const token = localStorage.getItem('token');
    if (!token) {
      toast({
        title: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        description: '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
        status: 'warning',
        duration: 4000,
        isClosable: true,
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
      localStorage.setItem('pendingCheckout', 'true');
      router.push('/login');
      return;
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    router.push('/checkout');
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
  const addSampleItems = () => {
    const sampleItems: CartItem[] = [
      {
        id: 1,
        name: '–ë—É–∫–µ—Ç "–í–µ—Å–µ–Ω–Ω—è—è —Å–≤–µ–∂–µ—Å—Ç—å"',
        price: 2500,
        quantity: 1,
        imageUrl: 'https://images.unsplash.com/photo-1490750967868-88aa4486c946?w=400',
        shopName: '–¶–≤–µ—Ç–æ—á–Ω—ã–π —Ä–∞–π'
      },
      {
        id: 2,
        name: '–†–æ–∑—ã –∫—Ä–∞—Å–Ω—ã–µ (11 —à—Ç—É–∫)',
        price: 1800,
        quantity: 2,
        imageUrl: 'https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=400',
        shopName: '–†–æ–∑–æ–≤—ã–π —Å–∞–¥'
      }
    ];
    localStorage.setItem('cart', JSON.stringify(sampleItems));
    window.dispatchEvent(new Event('cartUpdated'));
    toast({
      title: '–î–µ–º–æ-—Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã',
      description: '–í –∫–æ—Ä–∑–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã',
      status: 'success',
      duration: 2000,
      isClosable: true,
    });
  };

  if (loading) {
    return (
      <Box minH="100vh" bg="gray.50" display="flex" alignItems="center" justifyContent="center">
        <Spinner size="xl" color="pink.500" />
      </Box>
    );
  }

  return (
    <Box minH="100vh" bg="gray.50">
      <Container maxW="6xl" py={8}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
        <VStack spacing={6} align="stretch">
          <HStack justify="space-between" align="center">
            <HStack spacing={4}>
              <Button
                leftIcon={<FiHome />}
                colorScheme="pink"
                variant="outline"
                onClick={() => router.push('/')}
                size="md"
              >
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
              <Button
                leftIcon={<FaArrowLeft />}
                variant="ghost"
                onClick={() => router.back()}
              >
                –ù–∞–∑–∞–¥
              </Button>
            </HStack>
            
            <Heading size="lg" color="gray.700">
              üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫
            </Heading>
          </HStack>

          {/* –î–µ–º–æ-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ */}
          {cartItems.length === 0 && (
            <Alert status="info" borderRadius="md">
              <AlertIcon />
              <VStack align="start" spacing={2}>
                <Text fontWeight="medium">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</Text>
                <Text fontSize="sm" color="gray.600">
                  –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                </Text>
                <Button
                  leftIcon={<FaShoppingBag />}
                  colorScheme="pink"
                  size="sm"
                  onClick={addSampleItems}
                >
                  –î–æ–±–∞–≤–∏—Ç—å –¥–µ–º–æ-—Ç–æ–≤–∞—Ä—ã
                </Button>
              </VStack>
            </Alert>
          )}

          {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã */}
          {cartItems.length > 0 ? (
            <HStack spacing={8} align="start">
              {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
              <VStack spacing={4} flex={1} align="stretch">
                <HStack justify="space-between" align="center">
                  <Text fontSize="lg" fontWeight="semibold" color="gray.700">
                    –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ ({cartItems.length})
                  </Text>
                  <Button
                    variant="ghost"
                    colorScheme="red"
                    size="sm"
                    leftIcon={<FaTrash />}
                    onClick={clearCart}
                  >
                    –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
                  </Button>
                </HStack>

                {cartItems.map((item) => (
                  <motion.div
                    key={item.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3 }}
                  >
                    <Card>
                      <CardBody>
                        <HStack spacing={4} align="start">
                          <Image
                            src={item.imageUrl}
                            alt={item.name}
                            borderRadius="md"
                            boxSize="80px"
                            objectFit="cover"
                          />
                          
                          <VStack align="start" flex={1} spacing={2}>
                            <Text fontWeight="semibold" fontSize="md">
                              {item.name}
                            </Text>
                            <Badge colorScheme="purple" variant="subtle">
                              {item.shopName}
                            </Badge>
                            <Text color="pink.500" fontWeight="bold" fontSize="lg">
                              {item.price.toLocaleString('ru-RU')} ‚ÇΩ
                            </Text>
                          </VStack>

                          <VStack spacing={2} align="center">
                            <NumberInput
                              value={item.quantity}
                              onChange={(_, value) => updateQuantity(item.id, value)}
                              min={1}
                              max={99}
                              size="sm"
                              w="100px"
                            >
                              <NumberInputField />
                              <NumberInputStepper>
                                <NumberIncrementStepper />
                                <NumberDecrementStepper />
                              </NumberInputStepper>
                            </NumberInput>
                            
                            <Text fontSize="sm" color="gray.500">
                              –ò—Ç–æ–≥–æ: {(item.price * item.quantity).toLocaleString('ru-RU')} ‚ÇΩ
                            </Text>
                          </VStack>

                                                      <IconButton
                              aria-label="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
                              icon={<FaTrash />}
                              colorScheme="red"
                              variant="ghost"
                              size="sm"
                              onClick={() => removeFromCart(item.id)}
                            />
                        </HStack>
                      </CardBody>
                    </Card>
                  </motion.div>
                ))}
              </VStack>

              {/* –ò—Ç–æ–≥–æ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ */}
              <Card w="350px" position="sticky" top="20px">
                <CardHeader>
                  <Text fontSize="lg" fontWeight="semibold" color="gray.700">
                    –ò—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
                  </Text>
                </CardHeader>
                <CardBody>
                  <VStack spacing={4} align="stretch">
                    <HStack justify="space-between">
                      <Text color="gray.600">–¢–æ–≤–∞—Ä—ã ({cartItems.reduce((sum, item) => sum + item.quantity, 0)}):</Text>
                      <Text fontWeight="medium">
                        {totalAmount.toLocaleString('ru-RU')} ‚ÇΩ
                      </Text>
                    </HStack>
                    
                    <HStack justify="space-between">
                      <Text color="gray.600">–î–æ—Å—Ç–∞–≤–∫–∞:</Text>
                      <Text fontWeight="medium">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</Text>
                    </HStack>
                    
                    <Divider />
                    
                    <HStack justify="space-between">
                      <Text fontSize="lg" fontWeight="bold" color="gray.700">
                        –ö –æ–ø–ª–∞—Ç–µ:
                      </Text>
                      <Text fontSize="xl" fontWeight="bold" color="pink.500">
                        {totalAmount.toLocaleString('ru-RU')} ‚ÇΩ
                      </Text>
                    </HStack>

                    <Button
                      leftIcon={<FaCreditCard />}
                      colorScheme="pink"
                      size="lg"
                      onClick={proceedToCheckout}
                      width="100%"
                    >
                      –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                    </Button>
                  </VStack>
                </CardBody>
              </Card>
            </HStack>
          ) : (
            <Box textAlign="center" py={20}>
              <FaShoppingBag size={64} color="#E53E3E" />
              <Text fontSize="xl" fontWeight="semibold" color="gray.600" mt={4}>
                –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
              </Text>
              <Text color="gray.500" mt={2}>
                –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏
              </Text>
            </Box>
          )}
        </VStack>
      </Container>
    </Box>
  );
};

export default CartPage;
