import { useState, useEffect, useCallback, useRef } from 'react';
import { apiService, UserOrder } from '../../services/api';

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const debugJWT = () => {
  const token = localStorage.getItem('token');
  
  if (!token) {
    console.log('‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage');
    return null;
  }
  
  console.log('üîç JWT —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:');
  console.log('–î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:', token.length);
  console.log('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:', token.substring(0, 20));
  console.log('–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞:', token.substring(token.length - 20));
  console.log('–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫–∏:', token.includes('.'));
  console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫:', (token.match(/\./g) || []).length);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JWT
  const parts = token.split('.');
  if (parts.length === 3) {
    console.log('‚úÖ JWT —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (3 —á–∞—Å—Ç–∏)');
  } else {
    console.log('‚ùå JWT —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω:', parts.length, '—á–∞—Å—Ç–µ–π');
  }
  
  return token;
};

export const useOrders = (userId: number) => {
  const [orders, setOrders] = useState<UserOrder[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const loadingRef = useRef(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ API
  const loadOrdersFromAPI = useCallback(async () => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    if (loadingRef.current) {
      console.log('üö´ –ó–∞–ø—Ä–æ—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    try {
      loadingRef.current = true;
      setIsLoading(true);
      setError(null);
      
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      const debugToken = debugJWT();
      if (debugToken) {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª–∏–Ω–æ–π:', debugToken.length);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ API
      const apiOrders = await apiService.getUserOrders(userId, token);
      setOrders(apiOrders);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ –∫—ç—à
      try {
        localStorage.setItem(`orders_${userId}`, JSON.stringify(apiOrders));
      } catch (localError) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑—ã –≤ localStorage:', localError);
      }
      
    } catch (apiError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ API:', apiError);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
      
      // Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
      try {
        const savedOrders = localStorage.getItem(`orders_${userId}`);
        if (savedOrders) {
          const parsedOrders = JSON.parse(savedOrders);
          setOrders(parsedOrders);
        }
      } catch (localError) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ localStorage:', localError);
        setOrders([]);
      }
    } finally {
      setIsLoading(false);
      loadingRef.current = false;
    }
  }, [userId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ localStorage (—Ç–æ–ª—å–∫–æ –∫–∞–∫ fallback)
  const loadOrdersFromLocal = () => {
    try {
      const savedOrders = localStorage.getItem(`orders_${userId}`);
      if (savedOrders) {
        const parsedOrders = JSON.parse(savedOrders);
        setOrders(parsedOrders);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ localStorage:', error);
      setOrders([]);
    } finally {
      setIsLoading(false);
    }
  };

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤
  const loadOrders = async () => {
    await loadOrdersFromAPI();
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ localStorage (—Ç–æ–ª—å–∫–æ –∫–∞–∫ –∫—ç—à)
  const saveOrdersToLocal = (newOrders: UserOrder[]) => {
    try {
      localStorage.setItem(`orders_${userId}`, JSON.stringify(newOrders));
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑—ã –≤ localStorage:', error);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (—á–µ—Ä–µ–∑ API)
  const addOrder = async (order: UserOrder) => {
    try {
      const token = localStorage.getItem('token');
      if (token) {
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API
        await apiService.createOrder({
          userId: userId,
          items: order.items.map(item => ({
            productId: item.id,
            productName: item.productName,
            quantity: item.quantity,
            price: item.price,
            shopId: 1, // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            shopName: order.shopName,
          })),
          totalAmount: order.totalAmount,
          deliveryAddress: order.deliveryAddress,
          customerName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', // –î–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
          customerEmail: 'user@example.com', // –î–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
          customerPhone: '+7 999 999 99 99', // –î–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
          deliveryMethod: 'courier',
          paymentMethod: 'card',
        }, token);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        await loadOrdersFromAPI();
      } else {
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        const newOrders = [order, ...orders];
        setOrders(newOrders);
        saveOrdersToLocal(newOrders);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API:', error);
      // Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      const newOrders = [order, ...orders];
      setOrders(newOrders);
      saveOrdersToLocal(newOrders);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (—á–µ—Ä–µ–∑ API)
  const updateOrderStatus = async (orderId: string, newStatus: UserOrder['status']) => {
    try {
      const token = localStorage.getItem('token');
      if (token) {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
        await apiService.updateOrderStatus(orderId, { status: newStatus }, token);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        await loadOrdersFromAPI();
      } else {
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        const updatedOrders = orders.map(order => 
          order.id === orderId ? { ...order, status: newStatus } : order
        );
        setOrders(updatedOrders);
        saveOrdersToLocal(updatedOrders);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API:', error);
      // Fallback: –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      const updatedOrders = orders.map(order => 
        order.id === orderId ? { ...order, status: newStatus } : order
      );
      setOrders(updatedOrders);
      saveOrdersToLocal(updatedOrders);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (—á–µ—Ä–µ–∑ API)
  const removeOrder = async (orderId: string) => {
    try {
      const token = localStorage.getItem('token');
      if (token) {
        // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API
        await apiService.deleteOrder(orderId, token);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        await loadOrdersFromAPI();
      } else {
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        const filteredOrders = orders.filter(order => order.id !== orderId);
        setOrders(filteredOrders);
        saveOrdersToLocal(filteredOrders);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API:', error);
      // Fallback: —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      const filteredOrders = orders.filter(order => order.id !== orderId);
      setOrders(filteredOrders);
      saveOrdersToLocal(filteredOrders);
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–∫–∞–∑–∞
  const generateOrderId = () => {
    const timestamp = Date.now();
    const random = Math.floor(Math.random() * 1000);
    return `ORD-${timestamp}-${random}`;
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
  const createOrder = async (orderData: {
    items: Array<{
      productId: number;
      productName: string;
      quantity: number;
      price: number;
      shopId: number;
      shopName: string;
    }>;
    totalAmount: number;
    deliveryAddress: string;
    customerName: string;
    customerEmail: string;
    customerPhone: string;
    deliveryNotes?: string;
    deliveryMethod: string;
    paymentMethod: string;
  }) => {
    const newOrder: UserOrder = {
      id: generateOrderId(),
      orderNumber: generateOrderId(),
      status: 'pending',
      totalAmount: orderData.totalAmount,
      orderDate: new Date().toISOString(),
      deliveryAddress: orderData.deliveryAddress,
      shopName: orderData.items[0]?.shopName || '–¶–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω',
      items: orderData.items.map(item => ({
        id: item.productId,
        productName: item.productName,
        quantity: item.quantity,
        price: item.price,
        imageUrl: '/api/placeholder/150/150',
      })),
    };

    await addOrder(newOrder);
    return newOrder;
  };

  useEffect(() => {
    // –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ API
    const token = localStorage.getItem('token');
    if (token) {
      loadOrdersFromAPI();
    } else {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
      loadOrdersFromLocal();
    }
  }, [userId, loadOrdersFromAPI]);

  return {
    orders,
    isLoading,
    error,
    addOrder,
    updateOrderStatus,
    removeOrder,
    createOrder,
    loadOrders,
  };
};
