'use client';
import { useState, useEffect, useCallback } from 'react';
import { useToast } from '@chakra-ui/react';
import { apiService } from '../../services/api';

export interface FavouriteProduct {
  id: number;
  productId: number;
  productName: string;
  productDescription?: string;
  productPrice?: number;
  productImage?: string;
  addedDate: string;
}

export const useFavourites = () => {
  const [favouriteProducts, setFavouriteProducts] = useState<FavouriteProduct[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const toast = useToast();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
  const getUserId = useCallback((): number | null => {
    try {
      const token = localStorage.getItem('token');
      if (!token) return null;
      
      console.log('üîç getUserId - token:', token.substring(0, 50) + '...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JWT —Ç–æ–∫–µ–Ω–∞
      const parts = token.split('.');
      if (parts.length !== 3) {
        console.error('‚ùå getUserId - –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JWT —Ç–æ–∫–µ–Ω–∞:', parts.length, '—á–∞—Å—Ç–µ–π');
        return null;
      }
      
      const payload = JSON.parse(atob(parts[1]));
      console.log('üîç getUserId - payload:', payload);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      if (payload.exp) {
        const now = Math.floor(Date.now() / 1000);
        const expiresAt = payload.exp;
        console.log('üîç getUserId - –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç:', new Date(expiresAt * 1000).toLocaleString());
        console.log('üîç getUserId - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:', new Date(now * 1000).toLocaleString());
        console.log('üîç getUserId - –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫:', now > expiresAt);
        
        if (now > expiresAt) {
          console.error('‚ùå getUserId - –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫!');
          // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω
          localStorage.removeItem('token');
          return null;
        }
      }
      
      const userId = payload.sub || null;
      console.log('üîç getUserId - extracted userId:', userId);
      
      return userId;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  const getToken = useCallback((): string | null => {
    const token = localStorage.getItem('token');
    console.log('üîç getToken - token exists:', !!token, 'length:', token?.length);
    
    if (token) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
      try {
        const parts = token.split('.');
        if (parts.length === 3) {
          const payload = JSON.parse(atob(parts[1]));
          if (payload.exp) {
            const now = Math.floor(Date.now() / 1000);
            if (now > payload.exp) {
              console.error('‚ùå getToken - –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ');
              localStorage.removeItem('token');
              setIsAuthenticated(false);
              return null;
            }
          }
        }
        setIsAuthenticated(true);
      } catch (error) {
        console.error('‚ùå getToken - –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        localStorage.removeItem('token');
        setIsAuthenticated(false);
        return null;
      }
    } else {
      setIsAuthenticated(false);
    }
    
    return token;
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
  const loadFavourites = useCallback(async () => {
    const userId = getUserId();
    const token = getToken();
    
    console.log('üîç loadFavourites - userId:', userId);
    console.log('üîç loadFavourites - token length:', token?.length);
    
    if (!userId || !token) {
      console.log('üîç loadFavourites - –ù–µ—Ç userId –∏–ª–∏ token, –æ—á–∏—â–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
      setFavouriteProducts([]);
      setIsAuthenticated(false);
      return;
    }

    setIsLoading(true);
    try {
      console.log('üîç loadFavourites - –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã...');
      const favourites = await apiService.getFavouriteProducts(userId, token);
      console.log('üîç loadFavourites - –ü–æ–ª—É—á–µ–Ω—ã –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:', favourites);
      setFavouriteProducts(favourites);
    } catch (error) {
      console.error('‚ùå loadFavourites - –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    } finally {
      setIsLoading(false);
    }
  }, [getUserId, getToken, toast]);

//   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
//   const redirectToLogin = useCallback(() => {
//     console.log('üîç redirectToLogin - –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞');
//     // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å router.push('/login') –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Next.js router
//     window.location.href = '/login';
//   }, []);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const addToFavourites = useCallback(async (product: any) => {
    const userId = getUserId();
    const token = getToken();
    
    console.log('üîç addToFavourites - userId:', userId);
    console.log('üîç addToFavourites - token length:', token?.length);
    console.log('üîç addToFavourites - product:', product);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRole = localStorage.getItem('userRole');
    console.log('üîç addToFavourites - userRole:', userRole);
    
    if (!userId || !token) {
      toast({
        title: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        description: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É',
        status: 'warning',
        duration: 3000,
        isClosable: true,
      });
      

      
      return false;
    }
    
    if (userRole === 'shop') {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ú–∞–≥–∞–∑–∏–Ω—ã –Ω–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
      return false;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
      if (!product.id || !product.name || !product.price) {
        console.error('‚ùå addToFavourites - –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞:', product);
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞',
          status: 'error',
          duration: 3000,
          isClosable: true,
        });
        return false;
      }

      const productPrice = parseFloat(product.price);
      if (isNaN(productPrice)) {
        console.error('‚ùå addToFavourites - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞:', product.price);
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞',
          status: 'error',
          duration: 3000,
          isClosable: true,
        });
        return false;
      }

      const favouriteData = {
        productId: product.id,
        productName: product.name,
        productDescription: product.description || '',
        productPrice: productPrice,
        productImage: product.imageUrl || '',
      };

      console.log('üîç addToFavourites - favouriteData:', favouriteData);
      console.log('üîç addToFavourites - API call starting...');

      const result = await apiService.addFavouriteProduct(userId, favouriteData, token);
      
      console.log('üîç addToFavourites - API result:', result);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const newFavourite: FavouriteProduct = {
        id: Date.now(), // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
        productId: product.id,
        productName: product.name,
        productDescription: product.description || '',
        productPrice: productPrice,
        productImage: product.imageUrl || '',
        addedDate: new Date().toISOString(),
      };
      
      setFavouriteProducts(prev => [...prev, newFavourite]);
      
      toast({
        title: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
        description: `${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ`,
        status: 'success',
        duration: 2000,
        isClosable: true,
        position: 'top-right',
      });
      
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
      return false;
    }
  }, [getUserId, getToken, toast]);

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const removeFromFavourites = useCallback(async (productId: number) => {
    const userId = getUserId();
    const token = getToken();
    
    console.log('üîç removeFromFavourites - productId:', productId);
    console.log('üîç removeFromFavourites - userId:', userId);
    console.log('üîç removeFromFavourites - token length:', token?.length);
    
    if (!userId || !token) {
      console.log('üîç removeFromFavourites - –ù–µ—Ç userId –∏–ª–∏ token');
      return false;
    }

    try {
      // –ù–∞—Ö–æ–¥–∏–º ID –∑–∞–ø–∏—Å–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
      const favouriteItem = favouriteProducts.find(item => item.productId === productId);
      console.log('üîç removeFromFavourites - –Ω–∞–π–¥–µ–Ω–Ω—ã–π favouriteItem:', favouriteItem);
      
      if (!favouriteItem) {
        console.log('üîç removeFromFavourites - favouriteItem –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return false;
      }

      console.log('üîç removeFromFavourites - –£–¥–∞–ª—è–µ–º –∏–∑ API...');
      await apiService.removeFavouriteProduct(userId, favouriteItem.id, token);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setFavouriteProducts(prev => prev.filter(item => item.productId !== productId));
      
      toast({
        title: '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
        description: '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
        status: 'info',
        duration: 2000,
        isClosable: true,
      });
      
      return true;
    } catch (error) {
      console.error('‚ùå removeFromFavourites - –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
      return false;
    }
  }, [getUserId, getToken, favouriteProducts, toast]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
  const isFavourite = useCallback((productId: number): boolean => {
    const result = favouriteProducts.some(item => item.productId === productId);
    console.log('üîç isFavourite - productId:', productId, 'result:', result, 'total favourites:', favouriteProducts.length);
    return result;
  }, [favouriteProducts]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const toggleFavourite = useCallback(async (product: any) => {
    console.log('üîç toggleFavourite - product:', product);
    const currentlyFavourite = isFavourite(product.id);
    console.log('üîç toggleFavourite - currentlyFavourite:', currentlyFavourite);
    
    if (currentlyFavourite) {
      console.log('üîç toggleFavourite - –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
      return await removeFromFavourites(product.id);
    } else {
      console.log('üîç toggleFavourite - –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
      return await addToFavourites(product);
    }
  }, [isFavourite, addToFavourites, removeFromFavourites]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('üîç useFavourites - useEffect triggered, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ...');
    loadFavourites();
  }, [loadFavourites]);

  return {
    favouriteProducts,
    isLoading,
    isAuthenticated,
    addToFavourites,
    removeFromFavourites,
    isFavourite,
    toggleFavourite,
    loadFavourites,
  };
};
