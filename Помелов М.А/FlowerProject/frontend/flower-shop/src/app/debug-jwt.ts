// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
export const debugJWT = () => {
  const token = localStorage.getItem('token');
  
  if (!token) {
    console.log('‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage');
    return;
  }
  
  console.log('üîç JWT —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:');
  console.log('–î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:', token.length);
  console.log('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:', token.substring(0, 20));
  console.log('–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞:', token.substring(token.length - 20));
  console.log('–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫–∏:', token.includes('.'));
  console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫:', (token.match(/\./g) || []).length);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JWT
  const parts = token.split('.');
  if (parts.length === 3) {
    console.log('‚úÖ JWT —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (3 —á–∞—Å—Ç–∏)');
    console.log('Header:', parts[0]);
    console.log('Payload:', parts[1]);
    console.log('Signature:', parts[2]);
    
    try {
      const payload = JSON.parse(atob(parts[1]));
      console.log('üìã JWT Payload:', payload);
    } catch (e) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è payload:', e);
    }
  } else {
    console.log('‚ùå JWT —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω:', parts.length, '—á–∞—Å—Ç–µ–π');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
  const headers = {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json',
  };
  
  console.log('üì§ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞:', headers);
  
  return {
    token,
    isValid: parts.length === 3,
    parts: parts.length,
    headers
  };
};



